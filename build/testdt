/*#include "sc.h"
#include <algorithm>
#include <vector>

using namespace cv;
using namespace std;




bool seam_carving(Mat& in_image, int new_width, int new_height, Mat& out_image){

    // some sanity checks
    // Check 1 -> new_width <= in_image.cols
    if(new_width>in_image.cols){
        cout<<"Invalid request!!! new_width has to be smaller than the current size!"<<endl;
        return false;
    }
    if(new_height>in_image.rows){
        cout<<"Invalid request!!! ne_height has to be smaller than the current size!"<<endl;
        return false;
    }
    
    if(new_width<=0){
        cout<<"Invalid request!!! new_width has to be positive!"<<endl;
        return false;

    }
    
    if(new_height<=0){
        cout<<"Invalid request!!! new_height has to be positive!"<<endl;
        return false;
        
    }

    
    return seam_carving_trivial(in_image, new_width, new_height, out_image);
}


// seam carves by removing trivial seams
bool seam_carving_trivial(Mat& in_image, int new_width, int new_height, Mat& out_image){

    Mat iimage = in_image.clone();
    Mat oimage = in_image.clone();
    for(int i=0; i<in_image.cols-new_width;i++){
        reduce_vertical_seam_trivial(iimage,oimage);
        iimage=oimage.clone();
    }

    for(int i=0; i<in_image.rows-new_height;i++){
          transpose(iimage, iimage);
            flip(iimage, iimage,1);
        reduce_vertical_seam_trivial(iimage,oimage);
         transpose(oimage, oimage);
            flip(oimage, oimage,0);
        iimage=oimage.clone();
    }
    
    out_image = oimage.clone();
    return true;
}



void minimumEnergyPixel(int row,int column, Mat &gradImage, Mat &enerySource)
{
 /* for(int i=1;i<row;i++)
  {
    for(int j=0;j<column;j++)
    {
      if(j==0)
      {
          enerySource.at<double>(i, j) = gradImage.at<double>(i,j)+(enerySource.at<double>(i - 1, j + 1),enerySource.at<double>(i - 1, j));               
      }
	  else if(j==column-1)
	  {
	       enerySource.at<double>(i, j) = gradImage.at<double>(i,j)+ min(enerySource.at<double>(i - 1, j - 1),enerySource.at<double>(i - 1, j));
	  }
	  else
	  {
 enerySource.at<double>(i, j) = gradImage.at<double>(i,j)+ min(min(enerySource.at<double>(i - 1, j - 1),enerySource.at<double>(i - 1, j)),enerySource.at<double>(i - 1, j + 1));
	  }
    }
   }*/


/*}


Mat GradientMatrix(Mat &in_image)
{
      Mat gradientSource,blurScource,graySource,gradientX,gradientY,absGradietntX,absGradietntY,gradient;
 // (converting input image to gradient image) from https://docs.opencv.org/2.4.13.7/doc/tutorials/imgproc/imgtrans/sobel_derivatives/sobel_derivatives.html
  int s=0;
  int d =s+1;
 int ddepth = CV_16S;
  GaussianBlur(in_image, blurScource, Size(3,3), s, d, BORDER_DEFAULT);   
    cvtColor(blurScource, graySource, CV_BGR2GRAY);     
    Sobel(graySource, gradientX, CV_32F, 1, 0,3);
    Sobel(graySource, gradientY, CV_32F, 0, 1,3);
    convertScaleAbs(gradientX, absGradietntX);
    convertScaleAbs(gradientY, absGradietntY); 
    addWeighted( absGradietntX, 0.5, absGradietntY, 0.5, 0, gradient ); 
    absGradietntY.release();
    absGradietntX.release();
    gradientX.release();
    gradientY.release();
graySource.release();
blurScource.release();
    //double value=1.0/255.0;    
    //gradient.convertTo(gradientSource, CV_64F, value);
    return gradient;
}
Mat EneregyMatrix(Mat &gradientSource){  
     int r=gradientSource.rows;
    int c=gradientSource.cols;
   double a,b,d;
    Mat enerySource = Mat(r, c, CV_64F, double(0));  
    gradientSource.row(0).copyTo(enerySource.row(0));
  //  minimumEnergyPixel(r,c,gradientSource,enerySource);
    for (int row = 1; row < r; row++) {
            for (int col = 0; col < c; col++) {
                a = enerySource.at<double>(row - 1, max(col - 1, 0));
                b = enerySource.at<double>(row - 1, col);
                d = enerySource.at<double>(row - 1, min(col + 1, c - 1));
                
                enerySource.at<double>(row, col) = gradientSource.at<double>(row, col) + min(a, min(b, d));
            }
}
    return enerySource;    
     
}
// vertical trivial seam is a seam through the center of the image
bool reduce_vertical_seam_trivial(Mat& in_image, Mat& out_image){
  double minimumValue,maximumValue;
  int rows,column,minimumColmunValue,minValueCol;
  Point minimumPoint,MaximumPoint;
  Mat gradientSource=GradientMatrix(in_image);
  Mat energySource=EneregyMatrix(gradientSource);  
  Mat Lastrow = energySource.row(energySource.rows - 1);
   int offset;
  minMaxLoc(Lastrow, &minimumValue, &maximumValue, &minimumPoint, &MaximumPoint); 
  
  /*for(int j=1;j<columnsd;j++){
        if(minenergy > energySource.at<double>(energySource.rows-1,j)){
            minenergy = energySource.at<double>(energySource.rows-1,j);
            minValueCol = j;
        }
}cout<<minValueCol;
  vector<int>dynamicSeam(energySource.rows); 
double a,b,c;  
  rows=gradientSource.rows;
  column=gradientSource.cols;
  minimumColmunValue=minimumPoint.y;
  dynamicSeam[rows-1]=minimumColmunValue;
  for(int i=rows-2;i>=0;i--)
  {
   
    //double currentValue = energySource.at<double>(i, minimumColmunValue) - gradientSource.at<double>(i, minimumColmunValue);
       /* if(minimumColmunValue==column-1){
            
        }
        else if(minimumColmunValue==0){
            if(currentValue==energySource.at<double>(i,minimumColmunValue+1))
                minimumColmunValue+=1;
        }
        else{
            if(currentValue == energySource.at<double>(i-1,minimumColmunValue-1))
                 minimumColmunValue-=1;
            else if(currentValue == energySource.at<double>(i-1,minimumColmunValue+1))
                 minimumColmunValue+=1;
        }
       */
/*a = energySource.at<double>(i, max(minimumColmunValue - 1, 0));
            b = energySource.at<double>(i, minimumColmunValue);
            c = energySource.at<double>(i, min(minimumColmunValue + 1, column - 1));
            
            if (min(a,b) > c) {
                offset = 1;
            }
            else if (min(a,c) > b) {
                offset = 0;
            }
            else if (min(b, c) > a) {
                offset = -1;
            }
            
            minimumColmunValue += offset;
            minimumColmunValue = min(max(minimumColmunValue, 0), column - 1); // take care of edge cases
        dynamicSeam[i]=minimumColmunValue;
  }
    Mat newImage = Mat(in_image.rows, in_image.cols-1, CV_8UC3);
    int oldRows = in_image.rows;
    int oldColumn =  in_image.cols;
    for(int i=0; i<oldRows;i++){
        int newColumn=0;
        for(int j=0;j<oldColumn;j++){
            if(j!=dynamicSeam[i]){
                newImage.at<Vec3b>(i,newColumn)=in_image.at<Vec3b>(i,j);                
                newColumn++;
            }
        }
    }
  out_image=newImage.clone();
  newImage.release();    
    
    return true;
}*/


#include "sc.h"

using namespace cv;
using namespace std;




bool seam_carving(Mat& in_image, int new_width, int new_height, Mat& out_image){

    // some sanity checks
    // Check 1 -> new_width <= in_image.cols
    if(new_width>in_image.cols){
        cout<<"Invalid request!!! new_width has to be smaller than the current size!"<<endl;
        return false;
    }
    if(new_height>in_image.rows){
        cout<<"Invalid request!!! ne_height has to be smaller than the current size!"<<endl;
        return false;
    }
    
    if(new_width<=0){
        cout<<"Invalid request!!! new_width has to be positive!"<<endl;
        return false;

    }
    
    if(new_height<=0){
        cout<<"Invalid request!!! new_height has to be positive!"<<endl;
        return false;
        
    }

    
    return seam_carving_trivial(in_image, new_width, new_height, out_image);
}


// seam carves by removing trivial seams
bool seam_carving_trivial(Mat& in_image, int new_width, int new_height, Mat& out_image){

    Mat iimage = in_image.clone();
    Mat oimage = in_image.clone();
    while(iimage.rows!=new_height || iimage.cols!=new_width){
        // horizontal seam if needed
        
        
        if(iimage.cols>new_width){
            reduce_vertical_seam_trivial(iimage, oimage,'v');
            iimage = oimage.clone();
        }
        if(iimage.rows>new_height){            
            reduce_vertical_seam_trivial(iimage, oimage,'h');
            transpose(oimage, oimage);
            flip(oimage, oimage,0);
            iimage = oimage.clone();
        }
    }
    
    out_image = oimage.clone();
    return true;
}

// horizontl trivial seam is a seam through the center of the image
bool reduce_horizontal_seam_trivial(Mat& in_image, Mat& out_image){

    // retrieve the dimensions of the new image
    int rows = in_image.rows-1;
    int cols = in_image.cols;
    
    // create an image slighly smaller
    out_image = Mat(rows, cols, CV_8UC3);
    
    //populate the image
    int middle = in_image.rows / 2;
    
    for(int i=0;i<=middle;++i)
        for(int j=0;j<cols;++j){
            Vec3b pixel = in_image.at<Vec3b>(i, j);
            
            /* at operator is r/w
            pixel[0] = 255;
            pixel[1] =255;
            pixel[2]=255;
            */
            
            
            
            out_image.at<Vec3b>(i,j) = pixel;
        }
    
    for(int i=middle+1;i<rows;++i)
        for(int j=0;j<cols;++j){
            Vec3b pixel = in_image.at<Vec3b>(i+1, j);
            
            /* at operator is r/w
             pixel[0] --> red
             pixel[1] --> green
             pixel[2] --> blue
             */
            
            
            out_image.at<Vec3b>(i,j) = pixel;
        }

    return true;
}
void rotateImage(Mat &matImage, int angle){
    if (angle == -90){
        transpose(matImage, matImage);
        flip(matImage, matImage,0);
    } else if (angle == 90){
        transpose(matImage, matImage);
        flip(matImage, matImage,1);
    }
}
Mat getGradient(Mat &in_image)
{
  Mat gradientSource,blurScource,graySource,gradientX,gradientY,absGradietntX,absGradietntY,gradient;
 // (converting input image to gradient image) from https://docs.opencv.org/2.4.13.7/doc/tutorials/imgproc/imgtrans/sobel_derivatives/sobel_derivatives.html
  int s=0;
  int d =s+1;
 int ddepth = CV_16S;
  GaussianBlur(in_image, blurScource, Size(3,3), s, d, BORDER_DEFAULT);   
    cvtColor(blurScource, graySource, CV_BGR2GRAY);     
    Sobel(graySource, gradientX, CV_32F, 1, 0,3);
    Sobel(graySource, gradientY, CV_32F, 0, 1,3);
    convertScaleAbs(gradientX, absGradietntX);
    convertScaleAbs(gradientY, absGradietntY); 
    addWeighted( absGradietntX, 0.5, absGradietntY, 0.5, 0, gradient ); 
    absGradietntY.release();
    absGradietntX.release();
    gradientX.release();
    gradientY.release();
graySource.release();
blurScource.release();
    //double value=1.0/255.0;    z
    //gradient.convertTo(gradientSource, CV_64F, value);
    return gradient;

}
// vertical trivial seam is a seam through the center of the image

bool reduce_vertical_seam_trivial(Mat& in_image, Mat& out_image , char align){
   if(align=='h') {
        rotateImage(in_image, 90);       
    }

    Mat gradentSource= getGradient(in_image);
    int energySource[gradentSource.rows][gradentSource.cols];
    int gradientrows=gradentSource.rows;
    int gradientcolumns=gradentSource.cols;
    for(int i=0;i<gradientrows;i++)
    {
      for(int j=0;j<gradientcolumns;j++)
      {
         if(i==0)
         {
	     energySource[i][j]=(int)gradentSource.at<uchar>(0,j);	
          }
          else if(j==0)
          {
             int left=energySource[i-1][j+1];
             int up =energySource[i-1][j];
             if(left>up)
             {
              energySource[i][j]= up+(int)gradentSource.at<uchar>(i,j);
             }
             else
             {
               energySource[i][j]= left+(int)gradentSource.at<uchar>(i,j);
              }   
          } 
          else if (j==gradientcolumns-1)
          {
              int right=energySource[i-1][j-1];
             int up =energySource[i-1][j];
             if(right>up)
             {
              energySource[i][j]= up+(int)gradentSource.at<uchar>(i,j);
             }
             else
             {
               energySource[i][j]= right+(int)gradentSource.at<uchar>(i,j);
              }   
      
          }
          else
          {
            int right=energySource[i-1][j-1];
            int up =energySource[i-1][j];
            int left=energySource[i-1][j+1];
            if(right<up)
            {
               if(right<left)
               {
                  energySource[i][j]= right+(int)gradentSource.at<uchar>(i,j);
               } 
            }
           else if(up<left)
           {
                  energySource[i][j]= up+(int)gradentSource.at<uchar>(i,j);
           }
           else
           {
               energySource[i][j]= left+(int)gradentSource.at<uchar>(i,j);
           }  
        }
   }
    
    }
   int dynamicPath[gradientrows];
   int minValue=energySource[gradientrows-1][0];
   int minColumn=0;
  for(int j=1;j<gradientcolumns;j++)
  {
     if(minValue>energySource[gradientrows-1][j]){
        minValue=energySource[gradientrows-1][j];
       minColumn=j;
 }       
  }
  dynamicPath[gradientrows-1]=minColumn;
  /*for(int i=gradientrows-2;i>=0;i++)
   {
            int right=energySource[i][max(minValue - 1, 0)];
            int up =energySource[i][minValue];
            int value = (minValue + 1 < gradientcolumns - 1)? minValue+1: gradientcolumns - 1;
            int left=energySource[i][value];
            int offset;
            if (min(right,up) > left) {
                offset = 1;
            }
            else if (min(right,left) > up) {
                offset = 0;
            }
            else if (min(up, left) > right ) {
                offset = -1;
            }
            
            minValue += offset;
            minValue = min(max(minValue, 0), gradientcolumns - 1); // take care of edge cases
dynamicPath[i] = minValue;
    }*/
int r = gradientrows-1;
int    c = minColumn;
   // seam[r]=c;
    while(r!=0){
        int val = energySource[r][c] - (int)gradentSource.at<uchar>(r,c);
        if(c==gradientcolumns-1){
            if(val==energySource[r-1][c-1])
                c=c-1;
        }
        else if(c==0){
            if(val==energySource[r-1][c+1])
                c=c+1;
        }
        else{
            if(val == energySource[r-1][c-1])
                c=c-1;
            else if(val == energySource[r-1][c+1])
                c=c+1;
        }
        r--;
        dynamicPath[r]=c;
}


  /* for(int i=gradientrows-1;i>0;i++)
   {
        int val = energySource[i][minColumn] - (int)gradentSource.at<uchar>(i,minColumn);
        if(minColumn==gradientcolumns-1){
            if(val==energySource[i-1][minColumn-1])
                minColumn-=1;
        }
        else if(minColumn==0){
            if(val==energySource[i-1][minColumn+1])
                minColumn+=1;
        }
        else{
            if(val == energySource[i-1][minColumn-1])
                minColumn-=1;
            else if(val == energySource[i-1][minColumn+1])
                 minColumn+=1;
        }
        
        dynamicPath[i]=minColumn;
}*/
    Mat newImage = Mat(in_image.rows, in_image.cols-1, CV_8UC3);
    int oldRows = in_image.rows;
    int oldColumn =  in_image.cols;
    int newRow=0;
    for(int i=0; i<oldRows;i++){
        int newColumn=0;
        for(int j=0;j<oldColumn;j++){
            if(j!=dynamicPath[i]){
                newImage.at<Vec3b>(i,newColumn)=in_image.at<Vec3b>(i,j);                
                newColumn++;
            }
        }
       //newRow++;
    }
  out_image=newImage.clone();
if(align=='h'){
        rotateImage(out_image,-90);
        
}
  //newImage.release();
    return true;





































}
















































































#include "sc.h"
#include <algorithm>
#include <vector>

using namespace cv;
using namespace std;




bool seam_carving(Mat& in_image, int new_width, int new_height, Mat& out_image){

    // some sanity checks
    // Check 1 -> new_width <= in_image.cols
    if(new_width>in_image.cols){
        cout<<"Invalid request!!! new_width has to be smaller than the current size!"<<endl;
        return false;
    }
    if(new_height>in_image.rows){
        cout<<"Invalid request!!! ne_height has to be smaller than the current size!"<<endl;
        return false;
    }
    
    if(new_width<=0){
        cout<<"Invalid request!!! new_width has to be positive!"<<endl;
        return false;

    }
    
    if(new_height<=0){
        cout<<"Invalid request!!! new_height has to be positive!"<<endl;
        return false;
        
    }

    
    return seam_carving_trivial(in_image, new_width, new_height, out_image);
}


// seam carves by removing trivial seams
bool seam_carving_trivial(Mat& in_image, int new_width, int new_height, Mat& out_image){

    Mat iimage = in_image.clone();
    Mat oimage = in_image.clone();
    for(int i=0; i<in_image.cols-new_width;i++){
        reduce_vertical_seam_trivial(iimage,oimage);
        iimage=oimage.clone();
    }

    for(int i=0; i<in_image.rows-new_height;i++){
          transpose(iimage, iimage);
            flip(iimage, iimage,1);
        reduce_vertical_seam_trivial(iimage,oimage);
         transpose(oimage, oimage);
            flip(oimage, oimage,0);
        iimage=oimage.clone();
    }
    
    out_image = oimage.clone();
    return true;
}



void minimumEnergyPixel(int row,int column, Mat &gradImage, Mat &enerySource)
{
 /* for(int i=1;i<row;i++)
  {
    for(int j=0;j<column;j++)
    {
      if(j==0)
      {
          enerySource.at<double>(i, j) = gradImage.at<double>(i,j)+(enerySource.at<double>(i - 1, j + 1),enerySource.at<double>(i - 1, j));               
      }
	  else if(j==column-1)
	  {
	       enerySource.at<double>(i, j) = gradImage.at<double>(i,j)+ min(enerySource.at<double>(i - 1, j - 1),enerySource.at<double>(i - 1, j));
	  }
	  else
	  {
 enerySource.at<double>(i, j) = gradImage.at<double>(i,j)+ min(min(enerySource.at<double>(i - 1, j - 1),enerySource.at<double>(i - 1, j)),enerySource.at<double>(i - 1, j + 1));
	  }
    }
   }*/

/*
}


Mat GradientMatrix(Mat &in_image)
{
      Mat gradientSource,blurScource,graySource,gradientX,gradientY,absGradietntX,absGradietntY,gradient;
 // (converting input image to gradient image) from https://docs.opencv.org/2.4.13.7/doc/tutorials/imgproc/imgtrans/sobel_derivatives/sobel_derivatives.html
  int s=0;
  int d =s+1;
 int ddepth = CV_16S;
  GaussianBlur(in_image, blurScource, Size(3,3), s, d, BORDER_DEFAULT);   
    cvtColor(blurScource, graySource, CV_BGR2GRAY);     
    Sobel(graySource, gradientX, CV_32F, 1, 0,3);
    Sobel(graySource, gradientY, CV_32F, 0, 1,3);
    convertScaleAbs(gradientX, absGradietntX);
    convertScaleAbs(gradientY, absGradietntY); 
    addWeighted( absGradietntX, 0.5, absGradietntY, 0.5, 0, gradient ); 
    absGradietntY.release();
    absGradietntX.release();
    gradientX.release();
    gradientY.release();
graySource.release();
blurScource.release();
    //double value=1.0/255.0;    
    //gradient.convertTo(gradientSource, CV_64F, value);
    return gradient;
}
Mat EneregyMatrix(Mat &gradientSource){  
     int r=gradientSource.rows;
    int c=gradientSource.cols;
   double a,b,d;
    Mat enerySource = Mat(r, c, CV_64F, double(0));  
    gradientSource.row(0).copyTo(enerySource.row(0));
  //  minimumEnergyPixel(r,c,gradientSource,enerySource);
    for (int row = 1; row < r; row++) {
            for (int col = 0; col < c; col++) {
                a = enerySource.at<double>(row - 1, max(col - 1, 0));
                b = enerySource.at<double>(row - 1, col);
                d = enerySource.at<double>(row - 1, min(col + 1, c - 1));
                
                enerySource.at<double>(row, col) = gradientSource.at<double>(row, col) + min(a, min(b, d));
            }
}
    return enerySource;    
     
}
// vertical trivial seam is a seam through the center of the image
bool reduce_vertical_seam_trivial(Mat& in_image, Mat& out_image){
  double minimumValue,maximumValue;
  int rows,column,minimumColmunValue,minValueCol;
  Point minimumPoint,MaximumPoint;
  Mat gradientSource=GradientMatrix(in_image);
  Mat energySource=EneregyMatrix(gradientSource);  
  Mat Lastrow = energySource.row(energySource.rows - 1);
   int offset;
  minMaxLoc(Lastrow, &minimumValue, &maximumValue, &minimumPoint, &MaximumPoint); 
  
  /*for(int j=1;j<columnsd;j++){
        if(minenergy > energySource.at<double>(energySource.rows-1,j)){
            minenergy = energySource.at<double>(energySource.rows-1,j);
            minValueCol = j;
        }
}cout<<minValueCol;
  vector<int>dynamicSeam(energySource.rows); 
double a,b,c;  
  rows=gradientSource.rows;
  column=gradientSource.cols;
  minimumColmunValue=minimumPoint.y;
  dynamicSeam[rows-1]=minimumColmunValue;
  for(int i=rows-2;i>=0;i--)
  {
   
    //double currentValue = energySource.at<double>(i, minimumColmunValue) - gradientSource.at<double>(i, minimumColmunValue);
       /* if(minimumColmunValue==column-1){
            
        }
        else if(minimumColmunValue==0){
            if(currentValue==energySource.at<double>(i,minimumColmunValue+1))
                minimumColmunValue+=1;
        }
        else{
            if(currentValue == energySource.at<double>(i-1,minimumColmunValue-1))
                 minimumColmunValue-=1;
            else if(currentValue == energySource.at<double>(i-1,minimumColmunValue+1))
                 minimumColmunValue+=1;
        }
       */
/*a = energySource.at<double>(i, max(minimumColmunValue - 1, 0));
            b = energySource.at<double>(i, minimumColmunValue);
            c = energySource.at<double>(i, min(minimumColmunValue + 1, column - 1));
            
            if (min(a,b) > c) {
                offset = 1;
            }
            else if (min(a,c) > b) {
                offset = 0;
            }
            else if (min(b, c) > a) {
                offset = -1;
            }
            
            minimumColmunValue += offset;
            minimumColmunValue = min(max(minimumColmunValue, 0), column - 1); // take care of edge cases
        dynamicSeam[i]=minimumColmunValue;
  }
    Mat newImage = Mat(in_image.rows, in_image.cols-1, CV_8UC3);
    int oldRows = in_image.rows;
    int oldColumn =  in_image.cols;
    for(int i=0; i<oldRows;i++){
        int newColumn=0;
        for(int j=0;j<oldColumn;j++){
            if(j!=dynamicSeam[i]){
                newImage.at<Vec3b>(i,newColumn)=in_image.at<Vec3b>(i,j);                
                newColumn++;
            }
        }
    }
  out_image=newImage.clone();
  newImage.release();    
    
    return true;
}*/


#include "sc.h"

using namespace cv;
using namespace std;




bool seam_carving(Mat& in_image, int new_width, int new_height, Mat& out_image){

    // some sanity checks
    // Check 1 -> new_width <= in_image.cols
    if(new_width>in_image.cols){
        cout<<"Invalid request!!! new_width has to be smaller than the current size!"<<endl;
        return false;
    }
    if(new_height>in_image.rows){
        cout<<"Invalid request!!! ne_height has to be smaller than the current size!"<<endl;
        return false;
    }
    
    if(new_width<=0){
        cout<<"Invalid request!!! new_width has to be positive!"<<endl;
        return false;

    }
    
    if(new_height<=0){
        cout<<"Invalid request!!! new_height has to be positive!"<<endl;
        return false;
        
    }

    
    return seam_carving_trivial(in_image, new_width, new_height, out_image);
}


// seam carves by removing trivial seams
bool seam_carving_trivial(Mat& in_image, int new_width, int new_height, Mat& out_image){

    Mat iimage = in_image.clone();
    Mat oimage = in_image.clone();
    while(iimage.rows!=new_height || iimage.cols!=new_width){
        // horizontal seam if needed
        
        
        if(iimage.cols>new_width){
            reduce_vertical_seam_trivial(iimage, oimage,'v');
            iimage = oimage.clone();
        }
        if(iimage.rows>new_height){            
            reduce_vertical_seam_trivial(iimage, oimage,'h');
            transpose(oimage, oimage);
            flip(oimage, oimage,0);
            iimage = oimage.clone();
        }
    }
    
    out_image = oimage.clone();
    return true;
}

// horizontl trivial seam is a seam through the center of the image
bool reduce_horizontal_seam_trivial(Mat& in_image, Mat& out_image){

    // retrieve the dimensions of the new image
    int rows = in_image.rows-1;
    int cols = in_image.cols;
    
    // create an image slighly smaller
    out_image = Mat(rows, cols, CV_8UC3);
    
    //populate the image
    int middle = in_image.rows / 2;
    
    for(int i=0;i<=middle;++i)
        for(int j=0;j<cols;++j){
            Vec3b pixel = in_image.at<Vec3b>(i, j);
            
            /* at operator is r/w
            pixel[0] = 255;
            pixel[1] =255;
            pixel[2]=255;
            */
            
            
            
          /*  out_image.at<Vec3b>(i,j) = pixel;
        }
    
    for(int i=middle+1;i<rows;++i)
        for(int j=0;j<cols;++j){
            Vec3b pixel = in_image.at<Vec3b>(i+1, j);
            
            /* at operator is r/w
             pixel[0] --> red
             pixel[1] --> green
             pixel[2] --> blue
             */
            
            
        /*  out_image.at<Vec3b>(i,j) = pixel;
        }

    return true;
}
void rotateImage(Mat &matImage, int angle){
    if (angle == -90){
        transpose(matImage, matImage);
        flip(matImage, matImage,0);
    } else if (angle == 90){
        transpose(matImage, matImage);
        flip(matImage, matImage,1);
    }
}
Mat getGradient(Mat &in_image)
{
  Mat gradientSource,blurScource,graySource,gradientX,gradientY,absGradietntX,absGradietntY,gradient;
 // (converting input image to gradient image) from https://docs.opencv.org/2.4.13.7/doc/tutorials/imgproc/imgtrans/sobel_derivatives/sobel_derivatives.html
  int s=0;
  int d =s+1;
 int ddepth = CV_16S;
  GaussianBlur(in_image, blurScource, Size(3,3), s, d, BORDER_DEFAULT);   
    cvtColor(blurScource, graySource, CV_BGR2GRAY);     
    Sobel(graySource, gradientX, CV_32F, 1, 0,3);
    Sobel(graySource, gradientY, CV_32F, 0, 1,3);
    convertScaleAbs(gradientX, absGradietntX);
    convertScaleAbs(gradientY, absGradietntY); 
    addWeighted( absGradietntX, 0.5, absGradietntY, 0.5, 0, gradient ); 
    absGradietntY.release();
    absGradietntX.release();
    gradientX.release();
    gradientY.release();
graySource.release();
blurScource.release();
    //double value=1.0/255.0;    z
    //gradient.convertTo(gradientSource, CV_64F, value);
    return gradient;

}
// vertical trivial seam is a seam through the center of the image

bool reduce_vertical_seam_trivial(Mat& in_image, Mat& out_image , char align){
    if(align=='h') {
        rotateImage(in_image, 90);
     //   rotateImage(bluredImage,90);
    }

    Mat gradentSource= getGradient(in_image);
    int gradentrows = gradentSource.rows;
    int gradentcolumns = gradentSource.cols;
    int energySource[gradentrows][gradentcolumns];
    int minEnergy;
    int minValueCol= 0;
    vector<int> seam(gradentrows);
    int r=0,c=0;
   int j=0;
   while(j<gradentcolumns)
   {
 	 energySource[0][j]= (int)gradentSource.at<uchar>(0,j);
        j++;
   } 

   

    for(int i = 1; i < gradentrows; i++){
        for(int j = 0; j < gradentcolumns; j++){
            if (j == 0)
            {
              int right=energySource[i-1][j+1];
              int up= energySource[i-1][j];
                if(right<up)
                energySource[i][j] =right;
                else 
                energySource[i][j] =up;
            }
            else if (j == gradentcolumns-1)
             {
                int left=energySource[i-1][j-1];
                int up= energySource[i-1][j]; 
                if(left<up)
                energySource[i][j] =left;
                else 
                energySource[i][j] =up;
              }  
            else
             {   
               energySource[i][j] = min(min(energySource[i-1][j-1], energySource[i-1][j]), energySource[i-1][j+1]);
              }
            energySource[i][j] += (int)gradentSource.at<uchar>(i,j);
        }
    }

    minEnergy = energySource[gradentrows-1][0];

    for(int j=1;j<gradentcolumns;j++){
        if(minEnergy > energySource[gradentrows-1][j]){
            minEnergy = energySource[gradentrows-1][j];
            minValueCol = j;
        }
    }

    r = gradentrows-1;
    c = minValueCol;
    seam[r]=c;
    while(r!=0){
        int val = energySource[r][c] - (int)gradentSource.at<uchar>(r,c);
        if(c==gradentcolumns-1){
            if(val==energySource[r-1][c-1])
                c=c-1;
        }
        else if(c==0){
            if(val==energySource[r-1][c+1])
                c=c+1;
        }
        else{
            if(val == energySource[r-1][c-1])
                c=c-1;
            else if(val == energySource[r-1][c+1])
                c=c+1;
        }
        r--;
        seam[r]=c;
    }

    Mat updatedImage = Mat(in_image.rows, in_image.cols-1, CV_8UC3);
   // Mat updatedBlurImage = Mat(bluredImage.rows, bluredImage.cols-1, CV_8UC3);

    int rs= in_image.rows;
    int cs= in_image.cols;
    for(int row=0; row<rs;row++){
        int a=0;
        for(int col=0;col<cs;col++){
            if(col!=seam[row]){
                updatedImage.at<Vec3b>(row,a)=in_image.at<Vec3b>(row,col);
                //updatedBlurImage.at<Vec3b>(row,a)=iimage.at<Vec3b>(row,col);
                a++;
            }
        }
    }



 Mat gradientSource=getGradient(in_image);
    int gradientRows = gradientSource.rows;
    int gradientColumns = gradientSource.cols;
    Mat newImage = Mat(in_image.rows, in_image.cols-1, CV_8UC3);

    int energySource[gradientRows][gradientColumns];

    
    for(int i = 0; i < gradientRows; i++){
        for(int j = 0; j < gradientColumns; j++){
         if(i==0)
           {
                energySource[i][j]= (int)gradientSource.at<uchar>(i, j);
           }
           else
           {       
           int left = energySource[i - 1][ max(j - 1, 0)];
           int up= energySource[i - 1][j];
           int  right = energySource[i - 1][min(j + 1, gradientColumns - 1)];                
          energySource[i][j]= (int)gradientSource.at<uchar>(i, j) + min(left, min(up,right));
          }
        }
    }
    int minRowValue= energySource[gradientRows-1][0];
    int minColumValue= 0;
   vector<int> dynamicPath(gradientRows);
   

    for(int j=1;j<gradientColumns;j++){
        if(minRowValue > energySource[gradientRows-1][j]){
            minRowValue = energySource[gradientRows-1][j];
            minColumValue = j;
        }
    }
  
   
    dynamicPath[gradientRows-1]=minColumValue; 
   for(int i = gradientRows-1;i>0;i--)  
   {
       int left = energySource[i - 1][ max(minColumValue - 1, 0)];      
       int  right = energySource[i - 1][min(minColumValue + 1, gradientColumns - 1)];           
            if((energySource[i][minColumValue] - (int)gradientSource.at<uchar>(i,minColumValue)) == left)
                minColumValue=minColumValue-1;
            else if((energySource[i][minColumValue] - (int)gradientSource.at<uchar>(i,minColumValue)) == right)
                minColumValue=minColumValue+1;
           minColumValue = min(max(minColumValue, 0), gradientColumns - 1);      
        dynamicPath[i]=minColumValue;
    }
    newUpdatedImage(in_image,newImage,dynamicPath,0);
    
    out_image=newImage.clone();
  
    newImage.release();


    return true;
























.





    out_image=updatedImage.clone();
    //bluredImage=updatedBlurImage.clone();
    updatedImage.release();
    //updatedBlurImage.release();

    if(align=='h'){
        rotateImage(out_image,-90);
       // rotateImage(bluredImage,-90);
    }

    return true;
}*/
